# Create Docker container user to build 0install generic binaries.
# We use a very old Ubuntu to maximise compatibility.

# (can't use 10.04 any more, due to "vsyscall attempted with vsyscall=none" when running bash)
# (can't use 12.04 any more; SSL libraries too old to download things from sf.net)
FROM ubuntu:14.04
ENV CPU x86_64
ENV OPAMYES true

RUN apt-get update
RUN apt-get install -y vim zeroinstall-injector libgtk2.0-dev libcurl4-openssl-dev build-essential ca-certificates  m4 unzip python-gobject wget curl --no-install-recommends
RUN useradd -m -u 1000 build

ENV HOME /root
ADD trustdb.xml /root/.config/0install.net/injector/trustdb.xml
# Bootstrap a modern 0install from 14.04's ancient copy :-)
RUN 0launch --main=/install.sh --cpu "$CPU" http://0install.net/tools/0install.xml local
RUN apt-get remove -y zeroinstall-injector

# Install opam, OCaml and 0install's dependencies
RUN wget https://github.com/ocaml/opam/releases/download/2.0.0-rc2/opam-2.0.0-rc2-x86_64-linux -O /usr/local/bin/opam
RUN chmod a+x /usr/local/bin/opam
USER build
ENV HOME /home/build
RUN mkdir /home/build/bin
ENV PATH /home/build/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
#RUN 0install add opam --cpu "$CPU" http://tools.ocaml.org/opam.xml
RUN opam init --comp=4.05.0 --disable-sandboxing
RUN opam install cppo yojson xmlm ounit lwt_react ocurl obus lablgtk lwt_glib sha cppo_ocamlbuild
RUN 0install add 0release --cpu "$CPU" http://0install.net/2007/interfaces/0release.xml

WORKDIR /mnt
